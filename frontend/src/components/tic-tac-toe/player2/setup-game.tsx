import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { useNetworkQuery } from "@/hooks/useNetwork";
import { NetworkType } from "@/types/network";

export function SetupGame() {
  const [isLoading, setIsLoading] = useState(false);
  const [inputsDisabled, setInputsDisabled] = useState(false);
  const [gameUUID, setGameUUID] = useState<string>("");
  const [isSuccess, setIsSuccess] = useState(false);
  const [isOpen, setIsOpen] = useState(true);
  const { data: network } = useNetworkQuery();

  const generateProgram = () => {
    // Placeholder for the actual generate program logic
    setIsLoading(true);
    setTimeout(() => {
      setIsLoading(false);
      setInputsDisabled(true);
      setIsSuccess(true);
    }, 2000);
  };

  const isUUIDValid = (uuid: string) => {
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return uuidRegex.test(uuid);
  };

  const amountToBet = network && network === NetworkType.Regtest ? 1 : 0.0001;

  return (
    <div className="space-y-4 p-4 rounded-lg border border-gray-200">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <div>
          <CollapsibleTrigger asChild>
            <h3 className="font-semibold mb-3 text-gray-800 cursor-pointer hover:text-gray-900">
              üéÆ Game Setup
            </h3>
          </CollapsibleTrigger>
          <CollapsibleContent>
            <p className="text-sm text-gray-700 mb-4">
              Enter the UUID generated by Player 1 to join the game.
            </p>

            <div className="space-y-3 flex gap-8">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <p className="text-sm text-gray-700 mb-1">Game UUID:</p>
                  <Input
                    id="gameUUID"
                    type="text"
                    onChange={(e) => setGameUUID(e.target.value)}
                    placeholder="Enter or generate UUID"
                    className="w-[375px]"
                    disabled={inputsDisabled}
                  />
                  {!isUUIDValid(gameUUID) && gameUUID && (
                    <p className="text-red-600 text-sm mt-1">
                      Invalid UUID format.
                    </p>
                  )}
                </div>
              </div>
              <div className="space-y-3 mt-4">
                <div className="flex items-center justify-between gap-2 pt-4">
                  <p className="text-sm text-gray-700">Amount to Bet:</p>
                  <p className="font-mono text-sm">{amountToBet} BTC</p>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <Button
                onClick={generateProgram}
                disabled={isLoading || inputsDisabled || !isUUIDValid(gameUUID)}
                className="w-full"
              >
                {isLoading ? "Generating..." : "üöÄ Generate Program"}
              </Button>

              {!isSuccess && (
                <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <h3 className="font-semibold mb-2 text-yellow-800">
                    ‚ö†Ô∏è Enter the numbers and UUID to start the program
                  </h3>
                  <p className="text-sm text-yellow-700">
                    Please enter the numbers and UUID, then click the button to
                    submit them to BitVMX for program creation.
                  </p>
                </div>
              )}

              {isSuccess && (
                <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                  <h3 className="font-semibold mb-2 text-green-800">
                    ‚úÖ UUID Generation Successful
                  </h3>
                  <p className="text-sm text-green-700">
                    Program generated successfully.
                  </p>
                </div>
              )}
            </div>
          </CollapsibleContent>
        </div>
      </Collapsible>
    </div>
  );
}
