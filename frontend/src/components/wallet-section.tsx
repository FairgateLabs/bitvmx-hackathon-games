import { useState } from "react";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { NetworkType } from "@/types/network";
import { useAddress } from "@/hooks/useAddress";
import { CopyButton } from "@/components/ui/copy-button";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface WalletSectionProps {
  networkSelected: NetworkType;
}

export function WalletSection({ networkSelected }: WalletSectionProps) {
  const [transactionId, setTransactionId] = useState("");
  const [outputIndex, setOutputIndex] = useState("");
  const [isOpen, setIsOpen] = useState(true);
  const { data: addressData, isLoading, error } = useAddress();

  if (!addressData) return null;

  return (
    <div className="p-4 bg-white border border-gray-200 rounded-lg">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CollapsibleTrigger asChild>
          <h3 className="font-semibold mb-2 cursor-pointer hover:text-muted-foreground">
            ðŸ’° Wallet Information
          </h3>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <p className="text-sm text-gray-700 mb-4">
            This wallet was generated by the backend to provide initial funding.
            You receive 50 BTC to begin using the BitVMX protocol.
          </p>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <Label>Address:</Label>
              <div className="flex items-center gap-2">
                <p className="font-mono text-xs break-all bg-gray-100 p-2 rounded">
                  {addressData.address}
                </p>
                <CopyButton
                  text={addressData.address}
                  size="sm"
                  variant="outline"
                />
              </div>
              {isLoading && <p className="text-xs">Loading...</p>}
              {error && <p className="text-xs">Error: {error.message}</p>}
            </div>
            <div>
              <Label>Balance:</Label>
              {networkSelected === NetworkType.Testnet ? (
                <p className="text-xs">0 BTC</p>
              ) : (
                <p className="font-semibold">{50} BTC</p>
              )}
            </div>
          </div>

          {networkSelected === NetworkType.Testnet && (
            <div className="mt-4">
              <p className="text-sm text-gray-700 mb-2">
                Please fund the address provided. Once the transaction is
                on-chain and mined, provide the transaction ID and U below.
                <br />
                Min required balance: 0.0001 BTC
              </p>
              <div className="mb-2">
                <Label>Transaction ID:</Label>
                <input
                  type="text"
                  value={transactionId}
                  onChange={(e) => setTransactionId(e.target.value)}
                  className="w-full p-2 border rounded"
                  placeholder="Enter transaction ID"
                />
              </div>
              <div className="mb-2">
                <Label>Output index:</Label>
                <input
                  type="text"
                  value={outputIndex}
                  onChange={(e) => setOutputIndex(e.target.value)}
                  className="w-full p-2 border rounded"
                  placeholder="Enter Output index"
                />
              </div>
              <Button
                className="mt-2"
                onClick={() => alert("Done, I already did it!")}
              >
                Done, I already did it
              </Button>
            </div>
          )}
        </CollapsibleContent>
      </Collapsible>
    </div>
  );
}
